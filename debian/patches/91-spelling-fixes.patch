Description: Fix various spelling errors:
 precission
 supress
Author: Didier Raboud <odyx@debian.org>
Last-Update: 2014-02-11
--- a/icc2ps/cmsio1.c
+++ b/icc2ps/cmsio1.c
@@ -1162,7 +1162,7 @@
          AdjustEndianessArray16(NewLUT ->T, NewLUT->Tsize / sizeof(WORD));
     }
     else {
-        cmsSignalError(LCMS_ERRC_ABORTED, "Unknow precission of '%d'", CLUT.prec); 
+        cmsSignalError(LCMS_ERRC_ABORTED, "Unknow precision of '%d'", CLUT.prec); 
         return FALSE;
     }
 
--- a/icc2ps/icc2ps.c
+++ b/icc2ps/icc2ps.c
@@ -139,8 +139,8 @@
           
      fprintf(stderr, "%cb - Black point compensation (CRD only)\n", SW);    
      fprintf(stderr, "%cu - Do NOT generate resource name on CRD\n", SW);    
-     fprintf(stderr, "%cc<0,1,2> - Precission (0=LowRes, 1=Normal (default), 2=Hi-res) (CRD only)\n", SW);     
-     fprintf(stderr, "%cn<gridpoints> - Alternate way to set precission, number of CLUT points (CRD only)\n", SW);     
+     fprintf(stderr, "%cc<0,1,2> - Precision (0=LowRes, 1=Normal (default), 2=Hi-res) (CRD only)\n", SW);     
+     fprintf(stderr, "%cn<gridpoints> - Alternate way to set precision, number of CLUT points (CRD only)\n", SW);     
      
 	 fprintf(stderr, "\n");
      fprintf(stderr, "This program is intended to be a demo of the little cms\n"
--- a/icc2ps/cmscgats.c
+++ b/icc2ps/cmscgats.c
@@ -620,7 +620,7 @@
         if (it8->ch == '.') {        // Decimal point
 
                 double frac = 0.0;      // fraction
-                int prec = 0;           // precission
+                int prec = 0;           // precision
 
                 NextCh(it8);               // Eats dec. point
 
--- a/icc2ps/cmsps2.c
+++ b/icc2ps/cmsps2.c
@@ -54,7 +54,7 @@
   Color Space Arrays (CSA) 
   ==================================================================================
 
-  In order to obtain precission, code chooses between three ways to implement
+  In order to obtain precision, code chooses between three ways to implement
   the device -> XYZ transform. These cases identifies monochrome profiles (often
   implemented as a set of curves), matrix-shaper and LUT-based.
 
@@ -1456,7 +1456,7 @@
     OutputFormat = CHANNELS_SH(nChannels) | BYTES_SH(2);
     
     // For absolute colorimetric, the LUT is encoded as relative 
-    // in order to preserve precission.
+    // in order to preserve precision.
 
     RelativeEncodingIntent = Intent;
     if (RelativeEncodingIntent == INTENT_ABSOLUTE_COLORIMETRIC)
--- a/icc2ps/cmsmatsh.c
+++ b/icc2ps/cmsmatsh.c
@@ -75,7 +75,7 @@
         AllLinear   += cmsIsLinear(PtrW, p16 -> nSamples);
        }
 
-       // If is all linear, then supress table interpolation (this
+       // If is all linear, then suppress table interpolation (this
        // will speed greately some trivial operations. 
        // Return 1 if present, 0 if all linear
        
@@ -192,7 +192,7 @@
         AllLinear   += cmsIsLinear(PtrW, NewMatShaper -> p16.nSamples);
        }
 
-       // If is all linear, then supress table interpolation (this
+       // If is all linear, then suppress table interpolation (this
        // will speed greately some trivial operations
 
        if (AllLinear != 3)
